// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_spec.proto

#ifndef PROTOBUF_INCLUDED_task_5fspec_2eproto
#define PROTOBUF_INCLUDED_task_5fspec_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_task_5fspec_2eproto 

namespace protobuf_task_5fspec_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_task_5fspec_2eproto
namespace chrome_lang_id {
class TaskInput;
class TaskInputDefaultTypeInternal;
extern TaskInputDefaultTypeInternal _TaskInput_default_instance_;
class TaskInput_Part;
class TaskInput_PartDefaultTypeInternal;
extern TaskInput_PartDefaultTypeInternal _TaskInput_Part_default_instance_;
class TaskOutput;
class TaskOutputDefaultTypeInternal;
extern TaskOutputDefaultTypeInternal _TaskOutput_default_instance_;
class TaskSpec;
class TaskSpecDefaultTypeInternal;
extern TaskSpecDefaultTypeInternal _TaskSpec_default_instance_;
class TaskSpec_Parameter;
class TaskSpec_ParameterDefaultTypeInternal;
extern TaskSpec_ParameterDefaultTypeInternal _TaskSpec_Parameter_default_instance_;
}  // namespace chrome_lang_id
namespace google {
namespace protobuf {
template<> ::chrome_lang_id::TaskInput* Arena::CreateMaybeMessage<::chrome_lang_id::TaskInput>(Arena*);
template<> ::chrome_lang_id::TaskInput_Part* Arena::CreateMaybeMessage<::chrome_lang_id::TaskInput_Part>(Arena*);
template<> ::chrome_lang_id::TaskOutput* Arena::CreateMaybeMessage<::chrome_lang_id::TaskOutput>(Arena*);
template<> ::chrome_lang_id::TaskSpec* Arena::CreateMaybeMessage<::chrome_lang_id::TaskSpec>(Arena*);
template<> ::chrome_lang_id::TaskSpec_Parameter* Arena::CreateMaybeMessage<::chrome_lang_id::TaskSpec_Parameter>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace chrome_lang_id {

// ===================================================================

class TaskInput_Part : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_lang_id.TaskInput.Part) */ {
 public:
  TaskInput_Part();
  virtual ~TaskInput_Part();

  TaskInput_Part(const TaskInput_Part& from);

  inline TaskInput_Part& operator=(const TaskInput_Part& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskInput_Part(TaskInput_Part&& from) noexcept
    : TaskInput_Part() {
    *this = ::std::move(from);
  }

  inline TaskInput_Part& operator=(TaskInput_Part&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TaskInput_Part& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskInput_Part* internal_default_instance() {
    return reinterpret_cast<const TaskInput_Part*>(
               &_TaskInput_Part_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TaskInput_Part* other);
  friend void swap(TaskInput_Part& a, TaskInput_Part& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskInput_Part* New() const final {
    return CreateMaybeMessage<TaskInput_Part>(NULL);
  }

  TaskInput_Part* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskInput_Part>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TaskInput_Part& from);
  void MergeFrom(const TaskInput_Part& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskInput_Part* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_pattern = 7;
  bool has_file_pattern() const;
  void clear_file_pattern();
  static const int kFilePatternFieldNumber = 7;
  const ::std::string& file_pattern() const;
  void set_file_pattern(const ::std::string& value);
  #if LANG_CXX11
  void set_file_pattern(::std::string&& value);
  #endif
  void set_file_pattern(const char* value);
  void set_file_pattern(const char* value, size_t size);
  ::std::string* mutable_file_pattern();
  ::std::string* release_file_pattern();
  void set_allocated_file_pattern(::std::string* file_pattern);

  // optional string file_format = 8;
  bool has_file_format() const;
  void clear_file_format();
  static const int kFileFormatFieldNumber = 8;
  const ::std::string& file_format() const;
  void set_file_format(const ::std::string& value);
  #if LANG_CXX11
  void set_file_format(::std::string&& value);
  #endif
  void set_file_format(const char* value);
  void set_file_format(const char* value, size_t size);
  ::std::string* mutable_file_format();
  ::std::string* release_file_format();
  void set_allocated_file_format(::std::string* file_format);

  // optional string record_format = 9;
  bool has_record_format() const;
  void clear_record_format();
  static const int kRecordFormatFieldNumber = 9;
  const ::std::string& record_format() const;
  void set_record_format(const ::std::string& value);
  #if LANG_CXX11
  void set_record_format(::std::string&& value);
  #endif
  void set_record_format(const char* value);
  void set_record_format(const char* value, size_t size);
  ::std::string* mutable_record_format();
  ::std::string* release_record_format();
  void set_allocated_record_format(::std::string* record_format);

  // @@protoc_insertion_point(class_scope:chrome_lang_id.TaskInput.Part)
 private:
  void set_has_file_pattern();
  void clear_has_file_pattern();
  void set_has_file_format();
  void clear_has_file_format();
  void set_has_record_format();
  void clear_has_record_format();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_pattern_;
  ::google::protobuf::internal::ArenaStringPtr file_format_;
  ::google::protobuf::internal::ArenaStringPtr record_format_;
  friend struct ::protobuf_task_5fspec_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskInput : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_lang_id.TaskInput) */ {
 public:
  TaskInput();
  virtual ~TaskInput();

  TaskInput(const TaskInput& from);

  inline TaskInput& operator=(const TaskInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskInput(TaskInput&& from) noexcept
    : TaskInput() {
    *this = ::std::move(from);
  }

  inline TaskInput& operator=(TaskInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TaskInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskInput* internal_default_instance() {
    return reinterpret_cast<const TaskInput*>(
               &_TaskInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TaskInput* other);
  friend void swap(TaskInput& a, TaskInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskInput* New() const final {
    return CreateMaybeMessage<TaskInput>(NULL);
  }

  TaskInput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskInput>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TaskInput& from);
  void MergeFrom(const TaskInput& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TaskInput_Part Part;

  // accessors -------------------------------------------------------

  // repeated string file_format = 3;
  int file_format_size() const;
  void clear_file_format();
  static const int kFileFormatFieldNumber = 3;
  const ::std::string& file_format(int index) const;
  ::std::string* mutable_file_format(int index);
  void set_file_format(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_file_format(int index, ::std::string&& value);
  #endif
  void set_file_format(int index, const char* value);
  void set_file_format(int index, const char* value, size_t size);
  ::std::string* add_file_format();
  void add_file_format(const ::std::string& value);
  #if LANG_CXX11
  void add_file_format(::std::string&& value);
  #endif
  void add_file_format(const char* value);
  void add_file_format(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& file_format() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_file_format();

  // repeated string record_format = 4;
  int record_format_size() const;
  void clear_record_format();
  static const int kRecordFormatFieldNumber = 4;
  const ::std::string& record_format(int index) const;
  ::std::string* mutable_record_format(int index);
  void set_record_format(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_record_format(int index, ::std::string&& value);
  #endif
  void set_record_format(int index, const char* value);
  void set_record_format(int index, const char* value, size_t size);
  ::std::string* add_record_format();
  void add_record_format(const ::std::string& value);
  #if LANG_CXX11
  void add_record_format(::std::string&& value);
  #endif
  void add_record_format(const char* value);
  void add_record_format(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& record_format() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_record_format();

  // repeated group Part = 6 { ... };
  int part_size() const;
  void clear_part();
  static const int kPartFieldNumber = 6;
  ::chrome_lang_id::TaskInput_Part* mutable_part(int index);
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput_Part >*
      mutable_part();
  const ::chrome_lang_id::TaskInput_Part& part(int index) const;
  ::chrome_lang_id::TaskInput_Part* add_part();
  const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput_Part >&
      part() const;

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string creator = 2;
  bool has_creator() const;
  void clear_creator();
  static const int kCreatorFieldNumber = 2;
  const ::std::string& creator() const;
  void set_creator(const ::std::string& value);
  #if LANG_CXX11
  void set_creator(::std::string&& value);
  #endif
  void set_creator(const char* value);
  void set_creator(const char* value, size_t size);
  ::std::string* mutable_creator();
  ::std::string* release_creator();
  void set_allocated_creator(::std::string* creator);

  // optional bool multi_file = 5 [default = false];
  bool has_multi_file() const;
  void clear_multi_file();
  static const int kMultiFileFieldNumber = 5;
  bool multi_file() const;
  void set_multi_file(bool value);

  // @@protoc_insertion_point(class_scope:chrome_lang_id.TaskInput)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_creator();
  void clear_has_creator();
  void set_has_multi_file();
  void clear_has_multi_file();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> file_format_;
  ::google::protobuf::RepeatedPtrField< ::std::string> record_format_;
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput_Part > part_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr creator_;
  bool multi_file_;
  friend struct ::protobuf_task_5fspec_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskOutput : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_lang_id.TaskOutput) */ {
 public:
  TaskOutput();
  virtual ~TaskOutput();

  TaskOutput(const TaskOutput& from);

  inline TaskOutput& operator=(const TaskOutput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskOutput(TaskOutput&& from) noexcept
    : TaskOutput() {
    *this = ::std::move(from);
  }

  inline TaskOutput& operator=(TaskOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TaskOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskOutput* internal_default_instance() {
    return reinterpret_cast<const TaskOutput*>(
               &_TaskOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TaskOutput* other);
  friend void swap(TaskOutput& a, TaskOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskOutput* New() const final {
    return CreateMaybeMessage<TaskOutput>(NULL);
  }

  TaskOutput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskOutput>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TaskOutput& from);
  void MergeFrom(const TaskOutput& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string file_format = 2;
  bool has_file_format() const;
  void clear_file_format();
  static const int kFileFormatFieldNumber = 2;
  const ::std::string& file_format() const;
  void set_file_format(const ::std::string& value);
  #if LANG_CXX11
  void set_file_format(::std::string&& value);
  #endif
  void set_file_format(const char* value);
  void set_file_format(const char* value, size_t size);
  ::std::string* mutable_file_format();
  ::std::string* release_file_format();
  void set_allocated_file_format(::std::string* file_format);

  // optional string record_format = 3;
  bool has_record_format() const;
  void clear_record_format();
  static const int kRecordFormatFieldNumber = 3;
  const ::std::string& record_format() const;
  void set_record_format(const ::std::string& value);
  #if LANG_CXX11
  void set_record_format(::std::string&& value);
  #endif
  void set_record_format(const char* value);
  void set_record_format(const char* value, size_t size);
  ::std::string* mutable_record_format();
  ::std::string* release_record_format();
  void set_allocated_record_format(::std::string* record_format);

  // optional string file_base = 5;
  bool has_file_base() const;
  void clear_file_base();
  static const int kFileBaseFieldNumber = 5;
  const ::std::string& file_base() const;
  void set_file_base(const ::std::string& value);
  #if LANG_CXX11
  void set_file_base(::std::string&& value);
  #endif
  void set_file_base(const char* value);
  void set_file_base(const char* value, size_t size);
  ::std::string* mutable_file_base();
  ::std::string* release_file_base();
  void set_allocated_file_base(::std::string* file_base);

  // optional string file_extension = 6;
  bool has_file_extension() const;
  void clear_file_extension();
  static const int kFileExtensionFieldNumber = 6;
  const ::std::string& file_extension() const;
  void set_file_extension(const ::std::string& value);
  #if LANG_CXX11
  void set_file_extension(::std::string&& value);
  #endif
  void set_file_extension(const char* value);
  void set_file_extension(const char* value, size_t size);
  ::std::string* mutable_file_extension();
  ::std::string* release_file_extension();
  void set_allocated_file_extension(::std::string* file_extension);

  // optional int32 shards = 4 [default = 0];
  bool has_shards() const;
  void clear_shards();
  static const int kShardsFieldNumber = 4;
  ::google::protobuf::int32 shards() const;
  void set_shards(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chrome_lang_id.TaskOutput)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_file_format();
  void clear_has_file_format();
  void set_has_record_format();
  void clear_has_record_format();
  void set_has_shards();
  void clear_has_shards();
  void set_has_file_base();
  void clear_has_file_base();
  void set_has_file_extension();
  void clear_has_file_extension();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr file_format_;
  ::google::protobuf::internal::ArenaStringPtr record_format_;
  ::google::protobuf::internal::ArenaStringPtr file_base_;
  ::google::protobuf::internal::ArenaStringPtr file_extension_;
  ::google::protobuf::int32 shards_;
  friend struct ::protobuf_task_5fspec_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskSpec_Parameter : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_lang_id.TaskSpec.Parameter) */ {
 public:
  TaskSpec_Parameter();
  virtual ~TaskSpec_Parameter();

  TaskSpec_Parameter(const TaskSpec_Parameter& from);

  inline TaskSpec_Parameter& operator=(const TaskSpec_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskSpec_Parameter(TaskSpec_Parameter&& from) noexcept
    : TaskSpec_Parameter() {
    *this = ::std::move(from);
  }

  inline TaskSpec_Parameter& operator=(TaskSpec_Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TaskSpec_Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskSpec_Parameter* internal_default_instance() {
    return reinterpret_cast<const TaskSpec_Parameter*>(
               &_TaskSpec_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TaskSpec_Parameter* other);
  friend void swap(TaskSpec_Parameter& a, TaskSpec_Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskSpec_Parameter* New() const final {
    return CreateMaybeMessage<TaskSpec_Parameter>(NULL);
  }

  TaskSpec_Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskSpec_Parameter>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TaskSpec_Parameter& from);
  void MergeFrom(const TaskSpec_Parameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskSpec_Parameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string value = 5;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 5;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:chrome_lang_id.TaskSpec.Parameter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::protobuf_task_5fspec_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskSpec : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:chrome_lang_id.TaskSpec) */ {
 public:
  TaskSpec();
  virtual ~TaskSpec();

  TaskSpec(const TaskSpec& from);

  inline TaskSpec& operator=(const TaskSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskSpec(TaskSpec&& from) noexcept
    : TaskSpec() {
    *this = ::std::move(from);
  }

  inline TaskSpec& operator=(TaskSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TaskSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskSpec* internal_default_instance() {
    return reinterpret_cast<const TaskSpec*>(
               &_TaskSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TaskSpec* other);
  friend void swap(TaskSpec& a, TaskSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskSpec* New() const final {
    return CreateMaybeMessage<TaskSpec>(NULL);
  }

  TaskSpec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskSpec>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TaskSpec& from);
  void MergeFrom(const TaskSpec& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TaskSpec_Parameter Parameter;

  // accessors -------------------------------------------------------

  // repeated group Parameter = 3 { ... };
  int parameter_size() const;
  void clear_parameter();
  static const int kParameterFieldNumber = 3;
  ::chrome_lang_id::TaskSpec_Parameter* mutable_parameter(int index);
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskSpec_Parameter >*
      mutable_parameter();
  const ::chrome_lang_id::TaskSpec_Parameter& parameter(int index) const;
  ::chrome_lang_id::TaskSpec_Parameter* add_parameter();
  const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskSpec_Parameter >&
      parameter() const;

  // repeated .chrome_lang_id.TaskInput input = 6;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 6;
  ::chrome_lang_id::TaskInput* mutable_input(int index);
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput >*
      mutable_input();
  const ::chrome_lang_id::TaskInput& input(int index) const;
  ::chrome_lang_id::TaskInput* add_input();
  const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput >&
      input() const;

  // repeated .chrome_lang_id.TaskOutput output = 7;
  int output_size() const;
  void clear_output();
  static const int kOutputFieldNumber = 7;
  ::chrome_lang_id::TaskOutput* mutable_output(int index);
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskOutput >*
      mutable_output();
  const ::chrome_lang_id::TaskOutput& output(int index) const;
  ::chrome_lang_id::TaskOutput* add_output();
  const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskOutput >&
      output() const;

  // optional string task_name = 1;
  bool has_task_name() const;
  void clear_task_name();
  static const int kTaskNameFieldNumber = 1;
  const ::std::string& task_name() const;
  void set_task_name(const ::std::string& value);
  #if LANG_CXX11
  void set_task_name(::std::string&& value);
  #endif
  void set_task_name(const char* value);
  void set_task_name(const char* value, size_t size);
  ::std::string* mutable_task_name();
  ::std::string* release_task_name();
  void set_allocated_task_name(::std::string* task_name);

  // optional string task_type = 2;
  bool has_task_type() const;
  void clear_task_type();
  static const int kTaskTypeFieldNumber = 2;
  const ::std::string& task_type() const;
  void set_task_type(const ::std::string& value);
  #if LANG_CXX11
  void set_task_type(::std::string&& value);
  #endif
  void set_task_type(const char* value);
  void set_task_type(const char* value, size_t size);
  ::std::string* mutable_task_type();
  ::std::string* release_task_type();
  void set_allocated_task_type(::std::string* task_type);

  // @@protoc_insertion_point(class_scope:chrome_lang_id.TaskSpec)
 private:
  void set_has_task_name();
  void clear_has_task_name();
  void set_has_task_type();
  void clear_has_task_type();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskSpec_Parameter > parameter_;
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput > input_;
  ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskOutput > output_;
  ::google::protobuf::internal::ArenaStringPtr task_name_;
  ::google::protobuf::internal::ArenaStringPtr task_type_;
  friend struct ::protobuf_task_5fspec_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskInput_Part

// optional string file_pattern = 7;
inline bool TaskInput_Part::has_file_pattern() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskInput_Part::set_has_file_pattern() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskInput_Part::clear_has_file_pattern() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskInput_Part::clear_file_pattern() {
  file_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_pattern();
}
inline const ::std::string& TaskInput_Part::file_pattern() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.Part.file_pattern)
  return file_pattern_.GetNoArena();
}
inline void TaskInput_Part::set_file_pattern(const ::std::string& value) {
  set_has_file_pattern();
  file_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.Part.file_pattern)
}
#if LANG_CXX11
inline void TaskInput_Part::set_file_pattern(::std::string&& value) {
  set_has_file_pattern();
  file_pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskInput.Part.file_pattern)
}
#endif
inline void TaskInput_Part::set_file_pattern(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_pattern();
  file_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskInput.Part.file_pattern)
}
inline void TaskInput_Part::set_file_pattern(const char* value, size_t size) {
  set_has_file_pattern();
  file_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskInput.Part.file_pattern)
}
inline ::std::string* TaskInput_Part::mutable_file_pattern() {
  set_has_file_pattern();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.Part.file_pattern)
  return file_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskInput_Part::release_file_pattern() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskInput.Part.file_pattern)
  if (!has_file_pattern()) {
    return NULL;
  }
  clear_has_file_pattern();
  return file_pattern_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskInput_Part::set_allocated_file_pattern(::std::string* file_pattern) {
  if (file_pattern != NULL) {
    set_has_file_pattern();
  } else {
    clear_has_file_pattern();
  }
  file_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_pattern);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskInput.Part.file_pattern)
}

// optional string file_format = 8;
inline bool TaskInput_Part::has_file_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskInput_Part::set_has_file_format() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskInput_Part::clear_has_file_format() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskInput_Part::clear_file_format() {
  file_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_format();
}
inline const ::std::string& TaskInput_Part::file_format() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.Part.file_format)
  return file_format_.GetNoArena();
}
inline void TaskInput_Part::set_file_format(const ::std::string& value) {
  set_has_file_format();
  file_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.Part.file_format)
}
#if LANG_CXX11
inline void TaskInput_Part::set_file_format(::std::string&& value) {
  set_has_file_format();
  file_format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskInput.Part.file_format)
}
#endif
inline void TaskInput_Part::set_file_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_format();
  file_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskInput.Part.file_format)
}
inline void TaskInput_Part::set_file_format(const char* value, size_t size) {
  set_has_file_format();
  file_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskInput.Part.file_format)
}
inline ::std::string* TaskInput_Part::mutable_file_format() {
  set_has_file_format();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.Part.file_format)
  return file_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskInput_Part::release_file_format() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskInput.Part.file_format)
  if (!has_file_format()) {
    return NULL;
  }
  clear_has_file_format();
  return file_format_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskInput_Part::set_allocated_file_format(::std::string* file_format) {
  if (file_format != NULL) {
    set_has_file_format();
  } else {
    clear_has_file_format();
  }
  file_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_format);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskInput.Part.file_format)
}

// optional string record_format = 9;
inline bool TaskInput_Part::has_record_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskInput_Part::set_has_record_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskInput_Part::clear_has_record_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskInput_Part::clear_record_format() {
  record_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_record_format();
}
inline const ::std::string& TaskInput_Part::record_format() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.Part.record_format)
  return record_format_.GetNoArena();
}
inline void TaskInput_Part::set_record_format(const ::std::string& value) {
  set_has_record_format();
  record_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.Part.record_format)
}
#if LANG_CXX11
inline void TaskInput_Part::set_record_format(::std::string&& value) {
  set_has_record_format();
  record_format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskInput.Part.record_format)
}
#endif
inline void TaskInput_Part::set_record_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_format();
  record_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskInput.Part.record_format)
}
inline void TaskInput_Part::set_record_format(const char* value, size_t size) {
  set_has_record_format();
  record_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskInput.Part.record_format)
}
inline ::std::string* TaskInput_Part::mutable_record_format() {
  set_has_record_format();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.Part.record_format)
  return record_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskInput_Part::release_record_format() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskInput.Part.record_format)
  if (!has_record_format()) {
    return NULL;
  }
  clear_has_record_format();
  return record_format_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskInput_Part::set_allocated_record_format(::std::string* record_format) {
  if (record_format != NULL) {
    set_has_record_format();
  } else {
    clear_has_record_format();
  }
  record_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_format);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskInput.Part.record_format)
}

// -------------------------------------------------------------------

// TaskInput

// required string name = 1;
inline bool TaskInput::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskInput::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskInput::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskInput::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TaskInput::name() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.name)
  return name_.GetNoArena();
}
inline void TaskInput::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.name)
}
#if LANG_CXX11
inline void TaskInput::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskInput.name)
}
#endif
inline void TaskInput::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskInput.name)
}
inline void TaskInput::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskInput.name)
}
inline ::std::string* TaskInput::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskInput::release_name() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskInput.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskInput::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskInput.name)
}

// optional string creator = 2;
inline bool TaskInput::has_creator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskInput::set_has_creator() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskInput::clear_has_creator() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskInput::clear_creator() {
  creator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_creator();
}
inline const ::std::string& TaskInput::creator() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.creator)
  return creator_.GetNoArena();
}
inline void TaskInput::set_creator(const ::std::string& value) {
  set_has_creator();
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.creator)
}
#if LANG_CXX11
inline void TaskInput::set_creator(::std::string&& value) {
  set_has_creator();
  creator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskInput.creator)
}
#endif
inline void TaskInput::set_creator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_creator();
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskInput.creator)
}
inline void TaskInput::set_creator(const char* value, size_t size) {
  set_has_creator();
  creator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskInput.creator)
}
inline ::std::string* TaskInput::mutable_creator() {
  set_has_creator();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.creator)
  return creator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskInput::release_creator() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskInput.creator)
  if (!has_creator()) {
    return NULL;
  }
  clear_has_creator();
  return creator_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskInput::set_allocated_creator(::std::string* creator) {
  if (creator != NULL) {
    set_has_creator();
  } else {
    clear_has_creator();
  }
  creator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskInput.creator)
}

// repeated string file_format = 3;
inline int TaskInput::file_format_size() const {
  return file_format_.size();
}
inline void TaskInput::clear_file_format() {
  file_format_.Clear();
}
inline const ::std::string& TaskInput::file_format(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.file_format)
  return file_format_.Get(index);
}
inline ::std::string* TaskInput::mutable_file_format(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.file_format)
  return file_format_.Mutable(index);
}
inline void TaskInput::set_file_format(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.file_format)
  file_format_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TaskInput::set_file_format(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.file_format)
  file_format_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TaskInput::set_file_format(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  file_format_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskInput.file_format)
}
inline void TaskInput::set_file_format(int index, const char* value, size_t size) {
  file_format_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskInput.file_format)
}
inline ::std::string* TaskInput::add_file_format() {
  // @@protoc_insertion_point(field_add_mutable:chrome_lang_id.TaskInput.file_format)
  return file_format_.Add();
}
inline void TaskInput::add_file_format(const ::std::string& value) {
  file_format_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskInput.file_format)
}
#if LANG_CXX11
inline void TaskInput::add_file_format(::std::string&& value) {
  file_format_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskInput.file_format)
}
#endif
inline void TaskInput::add_file_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  file_format_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_lang_id.TaskInput.file_format)
}
inline void TaskInput::add_file_format(const char* value, size_t size) {
  file_format_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_lang_id.TaskInput.file_format)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TaskInput::file_format() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskInput.file_format)
  return file_format_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TaskInput::mutable_file_format() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskInput.file_format)
  return &file_format_;
}

// repeated string record_format = 4;
inline int TaskInput::record_format_size() const {
  return record_format_.size();
}
inline void TaskInput::clear_record_format() {
  record_format_.Clear();
}
inline const ::std::string& TaskInput::record_format(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.record_format)
  return record_format_.Get(index);
}
inline ::std::string* TaskInput::mutable_record_format(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.record_format)
  return record_format_.Mutable(index);
}
inline void TaskInput::set_record_format(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.record_format)
  record_format_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TaskInput::set_record_format(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.record_format)
  record_format_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TaskInput::set_record_format(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  record_format_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskInput.record_format)
}
inline void TaskInput::set_record_format(int index, const char* value, size_t size) {
  record_format_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskInput.record_format)
}
inline ::std::string* TaskInput::add_record_format() {
  // @@protoc_insertion_point(field_add_mutable:chrome_lang_id.TaskInput.record_format)
  return record_format_.Add();
}
inline void TaskInput::add_record_format(const ::std::string& value) {
  record_format_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskInput.record_format)
}
#if LANG_CXX11
inline void TaskInput::add_record_format(::std::string&& value) {
  record_format_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskInput.record_format)
}
#endif
inline void TaskInput::add_record_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  record_format_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_lang_id.TaskInput.record_format)
}
inline void TaskInput::add_record_format(const char* value, size_t size) {
  record_format_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_lang_id.TaskInput.record_format)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TaskInput::record_format() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskInput.record_format)
  return record_format_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TaskInput::mutable_record_format() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskInput.record_format)
  return &record_format_;
}

// optional bool multi_file = 5 [default = false];
inline bool TaskInput::has_multi_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskInput::set_has_multi_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskInput::clear_has_multi_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskInput::clear_multi_file() {
  multi_file_ = false;
  clear_has_multi_file();
}
inline bool TaskInput::multi_file() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.multi_file)
  return multi_file_;
}
inline void TaskInput::set_multi_file(bool value) {
  set_has_multi_file();
  multi_file_ = value;
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskInput.multi_file)
}

// repeated group Part = 6 { ... };
inline int TaskInput::part_size() const {
  return part_.size();
}
inline void TaskInput::clear_part() {
  part_.Clear();
}
inline ::chrome_lang_id::TaskInput_Part* TaskInput::mutable_part(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskInput.part)
  return part_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput_Part >*
TaskInput::mutable_part() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskInput.part)
  return &part_;
}
inline const ::chrome_lang_id::TaskInput_Part& TaskInput::part(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskInput.part)
  return part_.Get(index);
}
inline ::chrome_lang_id::TaskInput_Part* TaskInput::add_part() {
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskInput.part)
  return part_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput_Part >&
TaskInput::part() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskInput.part)
  return part_;
}

// -------------------------------------------------------------------

// TaskOutput

// required string name = 1;
inline bool TaskOutput::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskOutput::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskOutput::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskOutput::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TaskOutput::name() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.name)
  return name_.GetNoArena();
}
inline void TaskOutput::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.name)
}
#if LANG_CXX11
inline void TaskOutput::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskOutput.name)
}
#endif
inline void TaskOutput::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskOutput.name)
}
inline void TaskOutput::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskOutput.name)
}
inline ::std::string* TaskOutput::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskOutput.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskOutput::release_name() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskOutput.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskOutput::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskOutput.name)
}

// optional string file_format = 2;
inline bool TaskOutput::has_file_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskOutput::set_has_file_format() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskOutput::clear_has_file_format() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskOutput::clear_file_format() {
  file_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_format();
}
inline const ::std::string& TaskOutput::file_format() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.file_format)
  return file_format_.GetNoArena();
}
inline void TaskOutput::set_file_format(const ::std::string& value) {
  set_has_file_format();
  file_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.file_format)
}
#if LANG_CXX11
inline void TaskOutput::set_file_format(::std::string&& value) {
  set_has_file_format();
  file_format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskOutput.file_format)
}
#endif
inline void TaskOutput::set_file_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_format();
  file_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskOutput.file_format)
}
inline void TaskOutput::set_file_format(const char* value, size_t size) {
  set_has_file_format();
  file_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskOutput.file_format)
}
inline ::std::string* TaskOutput::mutable_file_format() {
  set_has_file_format();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskOutput.file_format)
  return file_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskOutput::release_file_format() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskOutput.file_format)
  if (!has_file_format()) {
    return NULL;
  }
  clear_has_file_format();
  return file_format_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskOutput::set_allocated_file_format(::std::string* file_format) {
  if (file_format != NULL) {
    set_has_file_format();
  } else {
    clear_has_file_format();
  }
  file_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_format);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskOutput.file_format)
}

// optional string record_format = 3;
inline bool TaskOutput::has_record_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskOutput::set_has_record_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskOutput::clear_has_record_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskOutput::clear_record_format() {
  record_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_record_format();
}
inline const ::std::string& TaskOutput::record_format() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.record_format)
  return record_format_.GetNoArena();
}
inline void TaskOutput::set_record_format(const ::std::string& value) {
  set_has_record_format();
  record_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.record_format)
}
#if LANG_CXX11
inline void TaskOutput::set_record_format(::std::string&& value) {
  set_has_record_format();
  record_format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskOutput.record_format)
}
#endif
inline void TaskOutput::set_record_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_format();
  record_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskOutput.record_format)
}
inline void TaskOutput::set_record_format(const char* value, size_t size) {
  set_has_record_format();
  record_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskOutput.record_format)
}
inline ::std::string* TaskOutput::mutable_record_format() {
  set_has_record_format();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskOutput.record_format)
  return record_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskOutput::release_record_format() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskOutput.record_format)
  if (!has_record_format()) {
    return NULL;
  }
  clear_has_record_format();
  return record_format_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskOutput::set_allocated_record_format(::std::string* record_format) {
  if (record_format != NULL) {
    set_has_record_format();
  } else {
    clear_has_record_format();
  }
  record_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_format);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskOutput.record_format)
}

// optional int32 shards = 4 [default = 0];
inline bool TaskOutput::has_shards() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TaskOutput::set_has_shards() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TaskOutput::clear_has_shards() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TaskOutput::clear_shards() {
  shards_ = 0;
  clear_has_shards();
}
inline ::google::protobuf::int32 TaskOutput::shards() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.shards)
  return shards_;
}
inline void TaskOutput::set_shards(::google::protobuf::int32 value) {
  set_has_shards();
  shards_ = value;
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.shards)
}

// optional string file_base = 5;
inline bool TaskOutput::has_file_base() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskOutput::set_has_file_base() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskOutput::clear_has_file_base() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskOutput::clear_file_base() {
  file_base_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_base();
}
inline const ::std::string& TaskOutput::file_base() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.file_base)
  return file_base_.GetNoArena();
}
inline void TaskOutput::set_file_base(const ::std::string& value) {
  set_has_file_base();
  file_base_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.file_base)
}
#if LANG_CXX11
inline void TaskOutput::set_file_base(::std::string&& value) {
  set_has_file_base();
  file_base_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskOutput.file_base)
}
#endif
inline void TaskOutput::set_file_base(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_base();
  file_base_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskOutput.file_base)
}
inline void TaskOutput::set_file_base(const char* value, size_t size) {
  set_has_file_base();
  file_base_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskOutput.file_base)
}
inline ::std::string* TaskOutput::mutable_file_base() {
  set_has_file_base();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskOutput.file_base)
  return file_base_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskOutput::release_file_base() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskOutput.file_base)
  if (!has_file_base()) {
    return NULL;
  }
  clear_has_file_base();
  return file_base_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskOutput::set_allocated_file_base(::std::string* file_base) {
  if (file_base != NULL) {
    set_has_file_base();
  } else {
    clear_has_file_base();
  }
  file_base_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_base);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskOutput.file_base)
}

// optional string file_extension = 6;
inline bool TaskOutput::has_file_extension() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaskOutput::set_has_file_extension() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TaskOutput::clear_has_file_extension() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TaskOutput::clear_file_extension() {
  file_extension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_extension();
}
inline const ::std::string& TaskOutput::file_extension() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskOutput.file_extension)
  return file_extension_.GetNoArena();
}
inline void TaskOutput::set_file_extension(const ::std::string& value) {
  set_has_file_extension();
  file_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskOutput.file_extension)
}
#if LANG_CXX11
inline void TaskOutput::set_file_extension(::std::string&& value) {
  set_has_file_extension();
  file_extension_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskOutput.file_extension)
}
#endif
inline void TaskOutput::set_file_extension(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_extension();
  file_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskOutput.file_extension)
}
inline void TaskOutput::set_file_extension(const char* value, size_t size) {
  set_has_file_extension();
  file_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskOutput.file_extension)
}
inline ::std::string* TaskOutput::mutable_file_extension() {
  set_has_file_extension();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskOutput.file_extension)
  return file_extension_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskOutput::release_file_extension() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskOutput.file_extension)
  if (!has_file_extension()) {
    return NULL;
  }
  clear_has_file_extension();
  return file_extension_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskOutput::set_allocated_file_extension(::std::string* file_extension) {
  if (file_extension != NULL) {
    set_has_file_extension();
  } else {
    clear_has_file_extension();
  }
  file_extension_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_extension);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskOutput.file_extension)
}

// -------------------------------------------------------------------

// TaskSpec_Parameter

// required string name = 4;
inline bool TaskSpec_Parameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskSpec_Parameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskSpec_Parameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskSpec_Parameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TaskSpec_Parameter::name() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.Parameter.name)
  return name_.GetNoArena();
}
inline void TaskSpec_Parameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskSpec.Parameter.name)
}
#if LANG_CXX11
inline void TaskSpec_Parameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskSpec.Parameter.name)
}
#endif
inline void TaskSpec_Parameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskSpec.Parameter.name)
}
inline void TaskSpec_Parameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskSpec.Parameter.name)
}
inline ::std::string* TaskSpec_Parameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.Parameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskSpec_Parameter::release_name() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskSpec.Parameter.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskSpec_Parameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskSpec.Parameter.name)
}

// optional string value = 5;
inline bool TaskSpec_Parameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskSpec_Parameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskSpec_Parameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskSpec_Parameter::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& TaskSpec_Parameter::value() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.Parameter.value)
  return value_.GetNoArena();
}
inline void TaskSpec_Parameter::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskSpec.Parameter.value)
}
#if LANG_CXX11
inline void TaskSpec_Parameter::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskSpec.Parameter.value)
}
#endif
inline void TaskSpec_Parameter::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskSpec.Parameter.value)
}
inline void TaskSpec_Parameter::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskSpec.Parameter.value)
}
inline ::std::string* TaskSpec_Parameter::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.Parameter.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskSpec_Parameter::release_value() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskSpec.Parameter.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskSpec_Parameter::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskSpec.Parameter.value)
}

// -------------------------------------------------------------------

// TaskSpec

// optional string task_name = 1;
inline bool TaskSpec::has_task_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskSpec::set_has_task_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskSpec::clear_has_task_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskSpec::clear_task_name() {
  task_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_name();
}
inline const ::std::string& TaskSpec::task_name() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.task_name)
  return task_name_.GetNoArena();
}
inline void TaskSpec::set_task_name(const ::std::string& value) {
  set_has_task_name();
  task_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskSpec.task_name)
}
#if LANG_CXX11
inline void TaskSpec::set_task_name(::std::string&& value) {
  set_has_task_name();
  task_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskSpec.task_name)
}
#endif
inline void TaskSpec::set_task_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_task_name();
  task_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskSpec.task_name)
}
inline void TaskSpec::set_task_name(const char* value, size_t size) {
  set_has_task_name();
  task_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskSpec.task_name)
}
inline ::std::string* TaskSpec::mutable_task_name() {
  set_has_task_name();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.task_name)
  return task_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskSpec::release_task_name() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskSpec.task_name)
  if (!has_task_name()) {
    return NULL;
  }
  clear_has_task_name();
  return task_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskSpec::set_allocated_task_name(::std::string* task_name) {
  if (task_name != NULL) {
    set_has_task_name();
  } else {
    clear_has_task_name();
  }
  task_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_name);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskSpec.task_name)
}

// optional string task_type = 2;
inline bool TaskSpec::has_task_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskSpec::set_has_task_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskSpec::clear_has_task_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskSpec::clear_task_type() {
  task_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_type();
}
inline const ::std::string& TaskSpec::task_type() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.task_type)
  return task_type_.GetNoArena();
}
inline void TaskSpec::set_task_type(const ::std::string& value) {
  set_has_task_type();
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.TaskSpec.task_type)
}
#if LANG_CXX11
inline void TaskSpec::set_task_type(::std::string&& value) {
  set_has_task_type();
  task_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_lang_id.TaskSpec.task_type)
}
#endif
inline void TaskSpec::set_task_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_task_type();
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.TaskSpec.task_type)
}
inline void TaskSpec::set_task_type(const char* value, size_t size) {
  set_has_task_type();
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.TaskSpec.task_type)
}
inline ::std::string* TaskSpec::mutable_task_type() {
  set_has_task_type();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.task_type)
  return task_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskSpec::release_task_type() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.TaskSpec.task_type)
  if (!has_task_type()) {
    return NULL;
  }
  clear_has_task_type();
  return task_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskSpec::set_allocated_task_type(::std::string* task_type) {
  if (task_type != NULL) {
    set_has_task_type();
  } else {
    clear_has_task_type();
  }
  task_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_type);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.TaskSpec.task_type)
}

// repeated group Parameter = 3 { ... };
inline int TaskSpec::parameter_size() const {
  return parameter_.size();
}
inline void TaskSpec::clear_parameter() {
  parameter_.Clear();
}
inline ::chrome_lang_id::TaskSpec_Parameter* TaskSpec::mutable_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.parameter)
  return parameter_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskSpec_Parameter >*
TaskSpec::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskSpec.parameter)
  return &parameter_;
}
inline const ::chrome_lang_id::TaskSpec_Parameter& TaskSpec::parameter(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.parameter)
  return parameter_.Get(index);
}
inline ::chrome_lang_id::TaskSpec_Parameter* TaskSpec::add_parameter() {
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskSpec.parameter)
  return parameter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskSpec_Parameter >&
TaskSpec::parameter() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskSpec.parameter)
  return parameter_;
}

// repeated .chrome_lang_id.TaskInput input = 6;
inline int TaskSpec::input_size() const {
  return input_.size();
}
inline void TaskSpec::clear_input() {
  input_.Clear();
}
inline ::chrome_lang_id::TaskInput* TaskSpec::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.input)
  return input_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput >*
TaskSpec::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskSpec.input)
  return &input_;
}
inline const ::chrome_lang_id::TaskInput& TaskSpec::input(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.input)
  return input_.Get(index);
}
inline ::chrome_lang_id::TaskInput* TaskSpec::add_input() {
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskSpec.input)
  return input_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskInput >&
TaskSpec::input() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskSpec.input)
  return input_;
}

// repeated .chrome_lang_id.TaskOutput output = 7;
inline int TaskSpec::output_size() const {
  return output_.size();
}
inline void TaskSpec::clear_output() {
  output_.Clear();
}
inline ::chrome_lang_id::TaskOutput* TaskSpec::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.TaskSpec.output)
  return output_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskOutput >*
TaskSpec::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.TaskSpec.output)
  return &output_;
}
inline const ::chrome_lang_id::TaskOutput& TaskSpec::output(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.TaskSpec.output)
  return output_.Get(index);
}
inline ::chrome_lang_id::TaskOutput* TaskSpec::add_output() {
  // @@protoc_insertion_point(field_add:chrome_lang_id.TaskSpec.output)
  return output_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::TaskOutput >&
TaskSpec::output() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.TaskSpec.output)
  return output_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_lang_id

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_task_5fspec_2eproto
